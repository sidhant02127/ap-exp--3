class Solution {
    public String longestNiceSubstring(String s) {
        if (s.length() < 2) return "";
        
        // Create a set to store all characters in the string
        Set<Character> set = new HashSet<>();
        for (char c : s.toCharArray()) {
            set.add(c);
        }
        
        // Iterate over the string and find the first character that is not part of a "nice" pair
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (set.contains(Character.toUpperCase(c)) && set.contains(Character.toLowerCase(c))) {
                continue;
            }
            
            // Recursively check the left and right substrings
            String left = longestNiceSubstring(s.substring(0, i));
            String right = longestNiceSubstring(s.substring(i + 1));
            
            return left.length() >= right.length() ? left : right;
        }
        
        // If the entire string is nice, return it
        return s;
    }
}
